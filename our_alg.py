#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd
import data.fixed.tool as tl
import data.fixed.gene_alg as gen
# import datetime, calendar, sys
"""============================================================================#
12/3
	- 建立主架構
============================================================================#"""

#=======================================================================================================#
#====================================================================================================#
#=================================================================================================#
# 請大家把自己的函數放在 data/fixed/ (和tool.py同一個位置)
# 再將自己的函數引進這裡 (這樣主程式的版本比較好控管)
#=================================================================================================#
#====================================================================================================#
#=======================================================================================================#

"""============================================================================#
新變數
CAPACITY_WORK[i]: 員工i還能上班的日子數
CAPACITY_NIGHT[i,j]: 1表示員工i在日子j能排晚班，0則否
ALREADY[i,j]: 1表示員工i在日子j能排班，0則否
CURRENT_DEMAND[j,t]: 日子j時段t的剩餘需求人數
WEEK_of_DAY[j]: 日子j所屬的那一週
LIMIT_MATRIX[a]: LIMIT_ORDER函數所生成的matrix，預設5種排序
LIMIT_LIST[b]: LIMIT_MATRIX的第a種限制式排序的限制式順序
n_LIMIT_LIST: 人數硬限制式的個數
LIMIT: LIMIT_LIST的第b個限制式
CSR_LIST: CSR_ORDER函數所生成的list
BOUND: 人數下限
============================================================================#"""

#========================================================================#
# class
#========================================================================#
# public class Pool{
# 	df_x : 員工班表
# 	df_y: 缺工人數表
# 	df_percent_day: 每天缺工百分比表
# 	df_percent_time: 每個時段缺工百分比表
# 	df_nightcount: 員工本月晚班次數
# 	df_resttime: 員工休息時間表
# }

#========================================================================#
# Global Variables
#========================================================================#
# 生成Initial pool的100個親代
# Pool INITIAL_POOL[100]

# 產生親代的迴圈數
parent = 100	# int


#=======================================================================================================#
#====================================================================================================#
#=================================================================================================#
# 函數 (工作分配)
#=================================================================================================#
#====================================================================================================#
#=======================================================================================================#

#========================================================================#
# LIMIT_ORDER(): 生成多組限制式 matrix 的函數 (林亭)
#========================================================================#



#========================================================================#
# CSR_ORDER(): 排序員工沒用度的函數 (林亭)
#========================================================================#





#========================================================================#
# ABLE(i,j,k): 確認員工i在日子j是否可排班別k (嬿鎔)
#========================================================================#




#========================================================================#
# ARRANGEMENT(): 安排好空著的班別的函數 (嬿鎔)
#========================================================================#


#========================================================================#
# CONFIRM(): 確認解是否可行的函數 (學濂)
#========================================================================#


#========================================================================#
# OBJECTIVE(): 計算目標式的值的函數 (碩珉)
#========================================================================#


#========================================================================#
# GENE(): 切分並交配的函數 (星宇)
#========================================================================#
def GENE(avaliable_sol, fix, nDAY, nEMPLOYEE, gen):
	return gen.gene_alg(avaliable_sol, fix, nDAY, nEMPLOYEE, gen)




#=======================================================================================================#
#====================================================================================================#
#=================================================================================================#
# 輸出
#=================================================================================================#
#====================================================================================================#
#=======================================================================================================#





#========================================================================#
# program end
#========================================================================#
print('\n\n*** Done ***')